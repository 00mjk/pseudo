#!/usr/bin/env python3

import sys
import os
import types
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
import pseudo
import pseudo.loader
import yaml

from subprocess import call

USAGE = '''
pseudo <input-filename> <output-format>+

where <output-format> can be:
  py / python 
  rb / ruby
  s / swift
  js / javascript
  ja / java
  cs / csharp
  -all
  -intermediate
  -typed
  api

<input-filename> can be either a .pseudo.yaml intemediate file or
a python / ruby / js / swift file using pseudo-translateable subset of the 
language
however, if it's a source file(not an intermediate one) pseudo expects
that pseudo-python for python or pseudo-<x> for language <x> is installed
and accessible from path
'''
# js = js_generator.JSGenerator
# python = python_generator.PythonGenerator
# ruby = ruby_generator.RubyGenerator
# swift = swift_generator.SwiftGenerator
# csharp = None

# GENERATORS = [js, python, ruby, swift, csharp]

# API_TRANSLATORS = {
#     'js': js_translator.JSTranslator, 'javascript': js_translator.JSTranslator,
#     'py': python_translator.PythonTranslator, 'python': python_translator.PythonTranslator,
#     'rb': ruby_translator.RubyTranslator, 'ruby': ruby_translator.RubyTranslator,
#     's': swift_translator, 'swift': swift_translator,
#     'ja': java_translator, 'java': java_translator,
#     'cs': None, 'csharp': None
# }



if __name__ == '__main__':
    if len(sys.argv) < 3:
        print(USAGE)
        exit()

    input_filename = sys.argv[1]
    output_formats = sys.argv[2:]

    intermediate_code = pseudo.loader.load_input(input_filename, call)
    base, _, ext = input_filename.rpartition('.')
    if ext == 'yaml':
      base = base.partition('.')[0]
    if output_formats[0] == 'intermediate' or output_formats[0] == 'in':
        with open('%s.pseudo.yaml' % base, 'f') as f:
            f.write(intermediate_code)
        exit()

    # typed = pseudo.type_engine.TypeEngine().inference(converted)

    # if output_formats[0] == 'typed':
    #     print(typed)
    #     exit()

    # api = API_TRANSLATORS[ext]().api_translate(typed)

    # if output_formats[0] == 'api':
    #     print(api)
    #     exit()
    
    # converted = pseudo.loader.as_tree(intermediate_code)
    
    # if output_formats[0] == 'all':
    #     formats = SUPPORTED_FORMATS
    #     generators = GENERATORS
    # else:
    for format in output_formats:
      if format in pseudo.SUPPORTED_FORMATS:
        output_source = pseudo.generate(pseudo.loader.as_tree(intermediate_code), format)
        with open('%s.%s' % (base, pseudo.FILE_EXTENSIONS[format]), 'w') as f:
            f.write(output_source)
      else:
        print('%s is not supported' % format)


